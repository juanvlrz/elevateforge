import { createClient } from '@supabase/supabase-js';
import type { Player } from '../types.ts';

// Define the database types for better type safety with the Supabase client.
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      players: {
        Row: Player; // The type of a row returned from the 'players' table.
        Insert: Omit<Player, 'id'>; // The type for inserting a new row. 'id' is generated by DB.
        Update: Partial<Player>; // The type for updating a row. All fields are optional.
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
  }
}

// Use the new Supabase credentials provided by the user.
const supabaseUrl = 'https://iyyuqknfsldighqtgbot.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml5eXVxa25mc2xkaWdocXRnYm90Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgwNTQzNjcsImV4cCI6MjA3MzYzMDM2N30.dFyOBvyI08W72uShmfG3foCI-FnIVsl9dvSp7BpxTGE';

if (!supabaseUrl || !supabaseAnonKey) {
    // This check is in place for robustness, although keys are hardcoded for this demo.
    throw new Error('Supabase URL or Anon Key is not configured.');
}

// Initialize and export the Supabase client.
// The generic type <Database> provides full type-safety for all database operations.
export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);